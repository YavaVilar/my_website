git config user.name YavaVilar
renv::status()
c("quarto")
renv::snapshot()
readLines("renv.lock")
remotes::install_github("nombre_de_usuario/olympicsWeather")
remotes::install_github("YavaVilar/olympicsWeather")
install.packages("remotes")
remotes::install_github("YavaVilar/olympicsWeather")
library(httr2)
install.packages("httr2")
remotes::install_github("YavaVilar/olympicsWeather")
intall.packages("tibble")
install.packages("tibble")
remotes::install_github("YavaVilar/olympicsWeather")
install.packages("tidygeocoder")
remotes::install_github("YavaVilar/olympicsWeather")
install.packages("usethis")
remotes::install_github("YavaVilar/olympicsWeather")
install.packages("testthat")
remotes::install_github("YavaVilar/olympicsWeather")
renv::snapshot()
readLines("renv.lock")
install.packages("quarto")
meteo_stade_france <- olympicsWeather::consultar_pronostico_stade_france()
meteo_stade_france <- olympicsWeather("France")
library(olympicsWeather)
meteo_stade_france <- olympicsWeather("France")
library(olympicsWeather)
meteo_stade_france <- olympicsWeather("France")
library(olympicsWeather)
meteo_stade_france <- olympicsWeather("France")
library(olympicsWeather)
meteo_stade_france <- olympicsWeather("France")
library(olympicsWeather)
meteo_stade_france <- olympicsWeather("France")
library(olympicsWeather)
meteo_stade_france <- get_forecast("France")
library(olympicsWeather)
library(tidygeocoder)
meteo_stade_france <- get_forecast("France")
library(olympicsWeather)
library(tidygeocoder)
library(httr2)
library(tibble)
meteo_stade_france <- get_forecast("France")
View(meteo_stade_france)
quarto preview
h <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv")
h <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv")
h <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv"; header=FALSE)
h <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", header=FALSE)
View(h)
h <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", header=TRUE, sep=",")
h <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", header=TRUE, sep=",")
h <- read.table("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", header=TRUE, sep=",", fill=TRUE)
h <- read.table("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", header=TRUE, sep=",", fill=TRUE)
`paris.2024.sites.olympiques.et.paralympiques.franciliens.(1)` <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", sep=";")
View(`paris.2024.sites.olympiques.et.paralympiques.franciliens.(1)`)
#Renommer en data_ex
data_ex <- paris-2024-sites-olympiques-et-paralympiques-franciliens (1)
#Renommer en data_ex
data_ex <- "paris-2024-sites-olympiques-et-paralympiques-franciliens (1)"
#Noms et nature des colonnes
str(data_ex)
#Nombre de lignes
nrow(data_ex) #31 lignes
#Renommer en data_ex
data_ex <- paris.2024.sites.olympiques.et.paralympiques.franciliens.(1)
#Renommer en data_ex
data_ex <- paris.2024.sites.olympiques.et.paralympiques.franciliens(1)
h <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", quote="double")
)
h <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", quote="\")
View(h)
View(h)
View(h)
h <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", quote="\", fill=TRUE)
h <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", sep="";", quote="\")
h <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", sep=";", quote="\")
View(h)
View(h)
h <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", sep=";", dec=",", quote="\"")
h <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", sep=";", dec=",", quote="\"")
View(h)
h <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", sep=";", dec=",", quote="\"", na.strings = NA)
View(h)
#Renommer en data_ex
data_ex <- read.csv("C:/Users/yavav/Downloads/paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv", sep=";", dec=",", quote="\"", na.strings = NA)
#Noms et nature des colonnes
str(data_ex)
#Nombre de lignes
nrow(data_ex) #31 lignes
install.packages("rvest")
quarto preview
install.packages("tidyverse")
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, errors=FALSE, message=FALSE, results=TRUE, fig.width=8, fig.height=6)
data_parquet <- arrow::read_parquet("C:/Users/yavav/OneDrive - Universitat de València/__MACOSX/olympics_athletes.json")
data_parquet <- arrow::read_parquet("C:/Users/yavav/OneDrive - Universitat de València/__MACOSX/olympics_athletes.json")
data_parquet <- arrow::read_parquet("C:/Users/yavav/OneDrive - Universitat de València/__MACOSX/olympics_athletes.json")
data_parquet <- arrow::read_parquet("C:/Users/yavav/OneDrive - Universitat de València/olympics_athletes.json")
data_parquet <- arrow::read_parquet("C:/Users/yavav/OneDrive - Universitat de València/tokyo_athletes.parquet")
View(data_parquet)
chemin_acces <- "C:/Users/yavav/OneDrive - Universitat de València/olympics_athletes.json"
library(jsonlite)
datos_json <- fromJSON(chemin_acces)
library(RSQLite)
con <- dbConnect(SQLite(), dbname ="C:/Users/yavav/Documents/R avancé et Git/data.sqlite")
tables <- dbListTables(con)
print(tables) ##Tables: Tokyo_medals et Tokyo_teams
dbWriteTable(con, "tokyo_athletes", data_parquet)
library(RSQLite)
con <- dbConnect(SQLite(), dbname ="C:/Users/yavav/Documents/R avancé et Git/data.sqlite")
tables <- dbListTables(con)
print(tables) ##Tables: Tokyo_medals et Tokyo_teams
dbWriteTable(con, "tokyo_athletes", data_parquet)
library(RSQLite)
dbWriteTable(con, "tokyo_athletes", data_parquet)
library(RSQLite)
library(DBI)
dbWriteTable(con, "tokyo_athletes", data_parquet)
View(con)
library(RSQLite)
library(DBI)
dbWriteTable(con, "tokyo_athletes", data_parquet, overwrite=TRUE)
chemin_acces <- "C:/Users/yavav/OneDrive - Universitat de València/olympics_athletes.json"
library(jsonlite)
datos_json <- fromJSON(chemin_acces)
datos_json <- as.data.frame(datos_json)
data_parquet <- arrow::read_parquet("C:/Users/yavav/OneDrive - Universitat de València/tokyo_athletes.parquet")
data_parquet <- as.data.frame(data_parquet)
View(data_parquet)
dim(datos_json) #269731 lignes et 13 colonnes
str(datos_json) #On observe le nom des différentes colonnes
library(RSQLite)
con <- dbConnect(SQLite(), dbname ="C:/Users/yavav/Documents/R avancé et Git/data.sqlite")
tables <- dbListTables(con)
print(tables) ##Tables: Tokyo_medals et Tokyo_teams
library(RSQLite)
library(DBI)
dbWriteTable(con, "tokyo_athletes", data_parquet, overwrite=TRUE)
dbWriteTable(con, "olympics_athletes", datos_json, overwrite=TRUE)
colonnes_olympics_athletes <- dbListFields(con, "olympics_athletes")
# Afficher la liste des colonnes
print(colonnes_olympics_athletes)
colonnes_tokyo_athletes <- dbListFields(con, "tokyo_athletes")
# Afficher la liste des colonnes
print(colonnes_tokyo_athletes)
library(RSQLite)
library(DBI)
dbWriteTable(con, "tokyo_athletes", data_parquet, overwrite=TRUE)
dbWriteTable(con, "olympics_athletes", datos_json, overwrite=TRUE)
colonnes_olympics_athletes <- dbListFields(con, "olympics_athletes")
# Afficher la liste des colonnes
print(colonnes_olympics_athletes)
colonnes_tokyo_athletes <- dbListFields(con, "tokyo_athletes")
# Afficher la liste des colonnes
print(colonnes_tokyo_athletes)
##Olympics
#Lire la table depuis la base de données
table_olympics_athletes <- dbReadTable(con, "olympics_athletes")
# Convertir la table en tibble
tibble_olympics_athletes <- as_tibble(table_olympics_athletes)
install.packages("tibble")
##Olympics
#Lire la table depuis la base de données
table_olympics_athletes <- dbReadTable(con, "olympics_athletes")
# Convertir la table en tibble
tibble_olympics_athletes <- as_tibble(table_olympics_athletes)
##Olympics
library(tibble)
#Lire la table depuis la base de données
table_olympics_athletes <- dbReadTable(con, "olympics_athletes")
# Convertir la table en tibble
tibble_olympics_athletes <- as_tibble(table_olympics_athletes)
##Athletes
#Lire la table depuis la base de données
table_tokyo_athletes <- dbReadTable(con, "tokyo_athletes")
# Convertir la table en tibble
tibble_tokyo_athletes <- as_tibble(table_tokyo_athletes)
#Importation des libraires
library(dplyr)
library(tidyr)
tibble_olympics_athletes <- tibble_olympics_athletes %>% mutate(Sex = as.factor(Sex))
help("separate_wider_delim")
separate_wider_delim(tibble_olympics_athletes, cols = Games, delim= " ", names=c("Year", "isSummer"), cols_remove = FALSE)
any(is.na(tibble_olympics_athletes$Age)) #Ce code permet de vérifier la présence des NA's au sein de la colonne Age
tibble_olympics_athletes %>% group_by(Games) %>%
summarise(mean_age=mean(Age,na.rm=TRUE)) #Ce code calcule la moyenne d'age pour chacune des éditions des JO, en excluant les valeurs manquantes du calcul.
tibble_olympics_athletes %>% group_by(Games) %>%
summarise(mean_age=mean(Age,na.rm=TRUE)) %>%
arrange(mean_age) %>% slice(1) #Cela permet d'ordonner de manière croissante les moyennes d'âge ainsi que de sélectionner la première ligne (les plus jeunes)
tibble_olympics_athletes %>% group_by(Games) %>%
summarise(mean_age=mean(Age,na.rm=TRUE)) %>%
arrange(desc(mean_age)) %>% slice(1) #Cela ordonne de manière décroissante pour trouver les plus âgés
tibble_olympics_athletes %>% filter(Sex=="F") %>% arrange(desc(Height)) %>% slice(1) %>% select(Height, Sport) #On filtre les femmes, on ordonne et sélectionne la ligne ainsi que les variables d'intérêt.
tibble_olympics_athletes %>% filter(Sex=="F" & !is.na(Height)) %>% group_by(Games) %>%
arrange(desc(Height)) %>% slice(1) %>% select(Games, Height, Sport) #On filtre pour les femmes et pour la taille sans valeurs manquantes, puis on calcule la taille plus grande pour chaque game et on sélectionne la colonne du sport correspondant.
on:
workflow_dispatch:
push:
branches: main
